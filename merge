#!/usr/bin/env node

const fs = require('fs')
const deps = require('./deps')
const filetype = require('./filetype')
const cli = require('./lib/cli')(require.main === module)
const help = require('./lib/help')(require.main === module)


const REGEXPS = {
	jade: (/^(\s*)include\s+(.*)$/mg), //doesn't supports extends
	stylus: (/^(\s*)(?:@import|@require)\s*['"]?([^'"]+)['"]?$/mg),
}

help({
	short: 'inline all file dependencies',
	usage: [
		'{COMMAND} <path_to_source_file>',
		'outputs a single dependency-less file to STDOUT',
		`supported filetypes: [${Object.keys(REGEXPS).join(', ')}]`,
	],
})

const read = file => fs.readFileSync(file, 'utf8')

const castToName = file => file
	.replace(/.(?:jade|pug|styl)$/, '')
	.replace(/\/(?:index)?$/, '')
	.split('/')
	.reverse()[0]

const ident = (whitespace, content) => content
	.replace(/^/mg, (whitespace||'').replace(/\\n/g, ''))


const inline = (regexp, current, dependencies) => {
	return current.replace(regexp, (match, whitespace, file) => {
		const _name = castToName(file)
		const dependency = dependencies.find(({name})=> name === _name)

		if(!dependency){
			throw new Error(`Missing required dependency: ${includeName}`)
		}

		return ident(whitespace, dependency.content)
	})
}

const recurse = (regexp, current, dependencies) => {
	const next = inline(regexp, current, dependencies)

	return next === current
		? current
		: recurse(regexp, next, dependencies)
}

const toFile = file => ({
	file,
	name: castToName(file),
	content: read(file)
})

const usuportedFiletype = filename => new InputError([
	`Can't merge file dependencies.`,
	`File with unsuported filetype: <${filename}>.`
].join('\n'))


const merge = filename => (
	new Promise((resolve, reject) => (
		filetype(filename).then(filetype => {
			deps(filename).then(deps => {
				const regexp = REGEXPS[filetype]
				const dependencies = deps.map(toFile)
				regexp
					? resolve(recurse(regexp, read(filename), dependencies))
					: reject(usuportedFiletype(filename))
			}).catch(reject)
		}).catch(reject)
	))
)

module.exports = cli(merge)
