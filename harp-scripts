#!/usr/bin/env bash
set -eo pipefail

if [ ! -z "$HS_HELP" ]; then
	[ ! -z "$HS_SHORT_HELP" ] && printf '%s\n' \
		'script runner';

	[ ! -z "$HS_USAGE_HELP" ] && printf '%s\n' '{COMMAND} help' \
		'see help';

	[ ! -z "$HS_HIDE_HELP" ] && printf '%s\n' 'true';
exit 0; fi;

get-local-dir(){
	# http://stackoverflow.com/a/246128
	SOURCE="${BASH_SOURCE[0]}"
	while [ -h "$SOURCE" ]; do
		DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
		SOURCE="$(readlink "$SOURCE")"
		[[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
	done

	echo "$(cd -P "$( dirname "$SOURCE" )" && pwd)"
}

harp-scripts(){
	local localdir="$(get-local-dir)"
	local input="${1}"
	local script="${localdir}/${input}";
	local localbin="${localdir}:${localdir}/node_modules/harp-scripts:${localdir}/node_modules/.bin:${localdir}/../.bin"

	if [ -x "$script" ] && [ -f "$script" ]; then
		shift;
		HS_BINARY="$0" PATH="${localbin}:${PATH}" "$script" "$@";
	elif [ "$input" = '-h' ] || [ "$input" = '--help' ]; then
		shift;
		"$0" 'help' "$@"
	else
		[ -z "${1}" ] && \
			echo "InputError: Missing required argument: script name." 1>&2
		[ -z "${1}" ] || \
			echo "InputError: unknown script <${1}>" 1>&2;

		echo "InputError: Run '${0} --help' to see available commands." 1>&2
		exit 1;
	fi
}

harp-scripts "$@"
